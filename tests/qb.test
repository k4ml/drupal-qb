<?php

class QBuilderTest extends DrupalUnitTestCase {
  function getInfo() {
    return array(
      'name' => t("QBuilder Unit Test"),
      'description' => t("Unit Test QBuilder"),
      'group' => t("Database"),
    );
  }

  function testBasicQuery() {
    $query = qb_select("users", "u");
    $sql = "SELECT * FROM users u";
    $message = $this->alert('', $sql, $query->sql());
    $this->assertEqual(trim($query->sql()), trim($sql), $message);
  }

  function testBasicCondition() {
    $query = qb_select("users", "u")
      ->condition("u.status", 1);
    $sql = "SELECT * FROM users u WHERE ( u.status = 1 )";
    $message = $this->alert('', $sql, $query->sql());
    $this->assertEqual(trim($query->sql()), trim($sql), $message);

    $query = qb_select("users", "u")
      ->condition("u.status", 1)
      ->condition("u.name", 'admin');
    $sql = "SELECT * FROM users u WHERE ( u.status = 1 ) AND ( u.name = 'admin' )";
    $message = $this->alert('', $sql, $query->sql());
    $this->assertEqual(trim($query->sql()), trim($sql), $message);
  }

  function testOrCondition() {
    $query = qb_select("users", "u")
      ->condition("u.status", 1)
      ->condition(qb_or()
        ->condition('u.name', 'admin')
        ->condition('u.name', 'root')
      );
    $sql = "SELECT * FROM users u WHERE ( u.status = 1 ) AND ( u.name = 'admin' OR u.name = 'root' )";
    $message = $this->alert('', $sql, $query->sql());
    $this->assertEqual(trim($query->sql()), trim($sql), $message);
  }

  function testBasicPlaceholders() {
    $query = qb_select("users", "u")
      ->condition("u.status", array('%d', 1));
    $sql = "SELECT * FROM users u WHERE ( u.status = %d )";
    $message = $this->alert("with placeholders", $sql, $query->sql());
    $this->assertEqual(trim($query->sql()), trim($sql), $message);

    $query = qb_select("users", "u")
      ->condition("u.status", array('%d', 1))
      ->condition("u.name", array('%s', 'admin'));
    $sql = "SELECT * FROM users u WHERE ( u.status = %d ) AND ( u.name = '%s' )";
    $message = $this->alert("with placeholders", $sql, $query->sql());
    $this->assertEqual(trim($query->sql()), trim($sql), $message);
    $message = "Number of placeholders must be 2, get ". count($query->getArguments());

    $arguments = $query->getArguments();
    $this->assertEqual(count($arguments), 2, $message);

    foreach ($arguments as $argument) {
      $this->assertTrue(is_scalar($argument), "Argument must be scalar");
    }
  }

  function testJoin() {
    $query = qb_select("users", "u")
      ->join("users_tree", "ut", "u.uid = ut.uid")
      ->condition("u.status", array('%d', 1));
    $sql = "SELECT * FROM users u INNER JOIN users_tree ut ON (u.uid = ut.uid) WHERE ( u.status = %d )";
    $message = $this->alert("with join", $sql, $query->sql());
    $this->assertEqual(trim($query->sql()), trim($sql), $message);
  }

  function alert($message, $expected, $result) {
    return t("Should display valid SQL query") ." ". $message .': '. $expected .' Display instead: '. $result;
  }

  function testSelectFields() {
    $query = qb_select("users", "u")
      ->fields('u', array('name', 'mail', 'status'))
      ->join("users_tree", "ut", "u.uid = ut.uid")
      ->condition("u.status", array('%d', 1));
    $sql = "SELECT u.name, u.mail, u.status FROM users u INNER JOIN users_tree ut ON (u.uid = ut.uid) WHERE ( u.status = %d )";
    $message = $this->alert("with fields", $sql, $query->sql());
    $this->assertEqual(trim($query->sql()), trim($sql), $message);

    $query = qb_select("users", "u")
      ->fields('u', array('name', 'mail', 'status'))
      ->fields('ut', array('tree_id', 'parent_uid'))
      ->join("users_tree", "ut", "u.uid = ut.uid")
      ->condition("u.status", array('%d', 1));
    $sql = "SELECT u.name, u.mail, u.status, ut.tree_id, ut.parent_uid FROM users u INNER JOIN users_tree ut ON (u.uid = ut.uid) WHERE ( u.status = %d )";
    $message = $this->alert("fields with different alias", $sql, $query->sql());
    $this->assertEqual(trim($query->sql()), trim($sql), $message);

    $query = qb_select("users", "u")
      ->fields('u', array('name'))
      ->fields('u', array('mail', 'status'))
      ->join("users_tree", "ut", "u.uid = ut.uid")
      ->condition("u.status", array('%d', 1));
    $sql = "SELECT u.name, u.mail, u.status FROM users u INNER JOIN users_tree ut ON (u.uid = ut.uid) WHERE ( u.status = %d )";
    $message = $this->alert("calling fields multiple time with same alias", $sql, $query->sql());
    $this->assertEqual(trim($query->sql()), trim($sql), $message);
  }

  function testLikeOperator() {
    $query = qb_select("users", "u")
      ->condition("u.name", "ad%%", "LIKE");
    $sql = "SELECT * FROM users u WHERE ( u.name LIKE 'ad%%' )";
    $message = $this->alert("using LIKE operator", $sql, $query->sql());
    $this->assertEqual(trim($query->sql()), trim($sql), $message);

    $query = qb_select("users", "u")
      ->condition("u.name", array('%s', "ad%"), "LIKE");
    $sql = "SELECT * FROM users u WHERE ( u.name LIKE '%s' )";
    $message = $this->alert("using LIKE operator with placeholder", $sql, $query->sql());
    $this->assertEqual(trim($query->sql()), trim($sql), $message);
    $message = "Arguments must be array('ad%')";
    $this->assertEqual($query->getArguments(), array('ad%'), $message);
  }

  function testOrderBy() {
    $query = qb_select("users", "u")
      ->orderBy("u.uid", "DESC");
    $sql = "SELECT * FROM users u ORDER BY u.uid DESC";
    $message = $this->alert("with ORDER BY clause", $sql, $query->sql());
    $this->assertEqual(trim($query->sql()), trim($sql), $message);

    $query = qb_select("users", "u")
      ->orderBy("u.uid", "DESC")
      ->orderBy("u.name");
    $sql = "SELECT * FROM users u ORDER BY u.uid DESC, u.name ASC";
    $message = $this->alert("with multiple ORDER BY clause", $sql, $query->sql());
    $this->assertEqual(trim($query->sql()), trim($sql), $message);
  }

  function testExpression() {
    $query = qb_select("users", "u")
      ->fields('u', array('name'))
      ->addExpression("COUNT(u.uid)", "user_count");
    $sql = "SELECT u.name, COUNT(u.uid) AS user_count FROM users u";
    $message = $this->alert("with COUNT expression", $sql, $query->sql());
    $this->assertEqual(trim($query->sql()), trim($sql), $message);

    $query = qb_select("users", "u")
      ->fields('u', array('name'))
      ->addExpression("length(ut.tree_id) - length(replace(tree_id, '.', ''))", "level")
      ->join("users_tree", "ut", "u.uid = ut.uid");
    $sql = "SELECT u.name, length(ut.tree_id) - length(replace(tree_id, '.', '')) AS level FROM users u INNER JOIN users_tree ut ON (u.uid = ut.uid)";
    $message = $this->alert("with complex expression", $sql, $query->sql());
    $this->assertEqual(trim($query->sql()), trim($sql), $message);
  }
}
