<?php

class QBuilderTest extends DrupalUnitTestCase {
  function getInfo() {
    return array(
      'name' => t("QBuilder Unit Test"),
      'description' => t("Unit Test QBuilder"),
      'group' => t("Database"),
    );
  }

  function testBasicCondition() {
    $query = qb_select("users", "u")
      ->condition("u.status", 1);
    $sql = "SELECT * FROM users u WHERE ( u.status = 1 )";
    $message = $this->alert('', $sql, $query->sql());
    $this->assertEqual(trim($query->sql()), trim($sql), $message);

    $query = qb_select("users", "u")
      ->condition("u.status", 1)
      ->condition("u.name", 'admin');
    $sql = "SELECT * FROM users u WHERE ( u.status = 1 ) AND ( u.name = 'admin' )";
    $message = $this->alert('', $sql, $query->sql());
    $this->assertEqual(trim($query->sql()), trim($sql), $message);
  }

  function testOrCondition() {
    $query = qb_select("users", "u")
      ->condition("u.status", 1)
      ->condition(qb_or()
        ->condition('u.name', 'admin')
        ->condition('u.name', 'root')
      );
    $sql = "SELECT * FROM users u WHERE ( u.status = 1 ) AND ( u.name = 'admin' OR u.name = 'root' )";
    $message = $this->alert('', $sql, $query->sql());
    $this->assertEqual(trim($query->sql()), trim($sql), $message);
  }

  function testBasicPlaceholders() {
    $query = qb_select("users", "u")
      ->condition("u.status", array('%d', 1));
    $sql = "SELECT * FROM users u WHERE ( u.status = %d )";
    $message = $this->alert("with placeholders", $sql, $query->sql());
    $this->assertEqual(trim($query->sql()), trim($sql), $message);

    $query = qb_select("users", "u")
      ->condition("u.status", array('%d', 1))
      ->condition("u.name", array('%s', 'admin'));
    $sql = "SELECT * FROM users u WHERE ( u.status = %d ) AND ( u.name = '%s' )";
    $message = $this->alert("with placeholders", $sql, $query->sql());
    $this->assertEqual(trim($query->sql()), trim($sql), $message);
    $message = "Number of placeholders must be 2, get ". count($query->getArguments());

    $arguments = $query->getArguments();
    $this->assertEqual(count($arguments), 2, $message);

    foreach ($arguments as $argument) {
      $this->assertTrue(is_scalar($argument), "Argument must be scalar");
    }
  }

  function testJoin() {
    $query = qb_select("users", "u")
      ->join("users_tree", "ut", "u.uid = ut.uid")
      ->condition("u.status", array('%d', 1));
    $sql = "SELECT * FROM users u INNER JOIN users_tree ut ON (u.uid = ut.uid) WHERE ( u.status = %d )";
    $message = $this->alert("with join", $sql, $query->sql());
    $this->assertEqual(trim($query->sql()), trim($sql), $message);
  }

  function alert($message, $expected, $result) {
    return t("Should display valid SQL query") ." ". $message .': '. $expected .' Display instead: '. $result;
  }
}
